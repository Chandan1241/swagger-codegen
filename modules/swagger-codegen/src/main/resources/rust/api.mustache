{{>partial_header}}
use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration, models};

pub struct {{{classname}}}Impl<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> {{{classname}}}Impl<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> {{{classname}}}Impl<C> {
        {{{classname}}}Impl {
            configuration: configuration,
        }
    }
}

pub trait {{classname}} {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<Future<Item = {{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error = Error>>;
{{/operation}}
{{/operations}}
}


impl<C: hyper::client::Connect>{{classname}} for {{classname}}Impl<C> {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{^isString}}{{{dataType}}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<Future<Item = {{^vendorExtensions.x-returnTypeInMethod}}(){{/vendorExtensions.x-returnTypeInMethod}}{{#vendorExtensions.x-returnTypeInMethod}}{{{.}}}{{/vendorExtensions.x-returnTypeInMethod}}, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();
        let mut req = hyper::Request::new(
            hyper::Method::{{httpMethod}},
            format!("{}{{path}}", configuration.base_path{{#allParams}}, {{paramName}}={{paramName}}{{/allParams}}));

        {{#hasQueryParams}}
        {{#queryParams}}
        {{#required}}
        // TODO query parameter {{baseName}}({{paramName}})
        {{/required}}
        {{^required}}
        // TODO query parameter {{baseName}}({{paramName}}) Optional
        {{/required}}
        {{/queryParams}}
        {{/hasQueryParams}}
        {{#hasHeaderParams}}
        {{#headerParams}}
        {{#required}}
        // TODO header parameter {{baseName}}({{paramName}})
        {{/required}}
        {{^required}}
        // TODO header parameter {{baseName}}({{paramName}}) Optional
        {{/required}}
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#hasFormParams}}
        {{#formParams}}
        {{#isFile}}
        {{^required}}
        // TODO form parameter (file) {{baseName}}({{paramName}}) Optional
        {{/required}}
        {{/isFile}}
        {{^isFile}}
        {{#required}}
        // TODO form parameter {{baseName}}({{paramName}})
        {{/required}}
        {{^required}}
        // TODO form parameter {{baseName}}({{paramName}}) Optional
        {{/required}}
        {{/isFile}}
        {{/formParams}}
        {{/hasFormParams}}
        {{#hasBodyParam}}
        {{#bodyParams}}
        // body params
        {{#required}}
        let serialized = serde_json::to_string({{{paramName}}}).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
        {{/required}}
        {{^required}}
        // TODO optional body parameter
        {{/required}}
        {{/bodyParams}}
        {{/hasBodyParam}}
    }

{{/operation}}
{{/operations}}
}
