{{>partial_header}}
use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct {{{classname}}}Impl<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> {{{classname}}}Impl<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> {{{classname}}}Impl<C> {
        {{{classname}}}Impl {
            configuration: configuration,
        }
    }
}

pub trait {{classname}} {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{^isString}}{{{dataType}}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<Future<Item = {{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error = Error>>;
{{/operation}}
{{/operations}}
}


impl<C: hyper::client::Connect>{{classname}} for {{classname}}Impl<C> {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{^isString}}{{{dataType}}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<Future<Item = {{^returnType}}(){{/returnType}}{{#returnType}}{{{.}}}{{/returnType}}, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::{{httpMethod}};

        {{^hasQueryParams}}
        let uri = format!("{}{{{path}}}", configuration.base_path{{#pathParams}}, {{baseName}}={{paramName}}{{/pathParams}});
        {{/hasQueryParams}}
        {{#hasQueryParams}}
        let query = url::form_urlencoded::Serializer::new(String::new())
            {{#queryParams}}
            .append_pair("{{baseName}}", {{paramName}})
            {{/queryParams}}
            .finish();
        let uri = format!("{}{{{path}}}{}", configuration.base_path, query{{#pathParams}}, {{baseName}}={{paramName}}{{/pathParams}});
        {{/hasQueryParams}}

        let mut req = hyper::Request::new(method, uri);

        {{#hasHeaderParams}}
        let mut headers = req.headers_mut();
        {{#headerParams}}
        headers.set_raw("{{baseName}}", {{paramName}});
        {{/headerParams}}
        {{/hasHeaderParams}}

        {{#hasBodyParam}}
        {{#bodyParams}}
        let serialized = serde_json::to_string(body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);
        {{/bodyParams}}
        {{/hasBodyParam}}

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            {{^returnType}}
            .and_then(|_| futures::future::ok(()))
            {{/returnType}}
            {{#returnType}}
            .and_then(|body| {
                let parsed: Result<{{{returnType}}}, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
            {{/returnType}}
        )
    }

{{/operation}}
{{/operations}}
}
