/* 
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration, models};

pub struct UserApiImpl<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> UserApiImpl<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> UserApiImpl<C> {
        UserApiImpl {
            configuration: configuration,
        }
    }
}

pub trait UserApi {
    fn CreateUser(&self, body: super::User) -> Box<Future<Item = (), Error = Error>>;
    fn CreateUsersWithArrayInput(&self, body: Vec<User>) -> Box<Future<Item = (), Error = Error>>;
    fn CreateUsersWithListInput(&self, body: Vec<User>) -> Box<Future<Item = (), Error = Error>>;
    fn DeleteUser(&self, username: String) -> Box<Future<Item = (), Error = Error>>;
    fn GetUserByName(&self, username: String) -> Box<Future<Item = User, Error = Error>>;
    fn LoginUser(&self, username: String, password: String) -> Box<Future<Item = String, Error = Error>>;
    fn LogoutUser(&self, ) -> Box<Future<Item = (), Error = Error>>;
    fn UpdateUser(&self, username: String, body: super::User) -> Box<Future<Item = (), Error = Error>>;
}


impl<C: hyper::client::Connect>UserApi for UserApiImpl<C> {
    fn CreateUser(&self, body: super::User) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri = format!("{}/user", configuration.base_path, "body"=body));

        let mut req = hyper::Request::new(method, uri);


        let serialized = serde_json::to_string(body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn CreateUsersWithArrayInput(&self, body: Vec<User>) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri = format!("{}/user/createWithArray", configuration.base_path, "body"=body));

        let mut req = hyper::Request::new(method, uri);


        let serialized = serde_json::to_string(body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn CreateUsersWithListInput(&self, body: Vec<User>) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri = format!("{}/user/createWithList", configuration.base_path, "body"=body));

        let mut req = hyper::Request::new(method, uri);


        let serialized = serde_json::to_string(body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn DeleteUser(&self, username: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri = format!("{}/user/{username}", configuration.base_path, "username"=username));

        let mut req = hyper::Request::new(method, uri);



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn GetUserByName(&self, username: &str) -> Box<Future<Item = super::User, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri = format!("{}/user/{username}", configuration.base_path, "username"=username));

        let mut req = hyper::Request::new(method, uri);



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<User, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn LoginUser(&self, username: &str, password: &str) -> Box<Future<Item = String, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = url::form_urlencoded::Serializer::new(String::new())
            .append_pair("username", username)
            .append_pair("password", password)
            .finish();
        let uri = format!("{}/user/login{}", configuration.base_path, query, "username"=username, "password"=password));

        let mut req = hyper::Request::new(method, uri);



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<String, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn LogoutUser(&self, ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri = format!("{}/user/logout", configuration.base_path));

        let mut req = hyper::Request::new(method, uri);



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn UpdateUser(&self, username: &str, body: super::User) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri = format!("{}/user/{username}", configuration.base_path, "username"=username, "body"=body));

        let mut req = hyper::Request::new(method, uri);


        let serialized = serde_json::to_string(body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

}
